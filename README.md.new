# Social & News Monitoring Dashboard

A modern Streamlit-based dashboard for tracking topics, people, or events across multiple social media platforms and news sites, with configurable email digests and AI-powered summaries.

## Features

- **Multi-platform Monitoring**: Track topics across Twitter/X, Reddit, Facebook, Instagram, YouTube, and news sites
- **Customizable Topics**: Add topics with custom keywords, profiles, and sources
- **Sleek UI**: Modern Apple-inspired UI with responsive cards, smooth animations, and intuitive navigation
- **Data Visualization**: Interactive time series charts, word clouds, and source distribution analytics
- **AI Summaries**: Generate concise topic summaries using local models via Ollama or HuggingFace
- **Configurable Email Digests**: Send daily, weekly, or custom frequency email reports
- **Non-blocking Operations**: Background processing for data collection and email sending
- **SQLite Database**: Efficient data storage and querying with SQLAlchemy
- **Photo Collection**: Gather relevant images from Unsplash or Pexels APIs

## Beginner-Friendly Setup Guide

These steps work on **Windows, macOS and Linux**. No prior Python knowledge is required.

### 1. Install Python and Git

1. Visit [python.org](https://www.python.org/downloads/) and install Python 3.10 (recommended).
   - On Windows, tick "Add Python to PATH" during installation.
2. Install [Git](https://git-scm.com/downloads) so you can clone the repository.

### 2. Download the Project

Open your terminal (Command Prompt on Windows or Terminal on Mac/Linux) and run:

```bash
git clone https://github.com/example/event_tracker_dashboard.git
cd event_tracker_dashboard
```

### 3. (Optional) Create a Virtual Environment

Keeping dependencies isolated is recommended but optional:

```bash
python -m venv venv
# Activate it
source venv/bin/activate      # macOS/Linux
venv\Scripts\activate        # Windows
```

### 4. Install Requirements

```bash
pip install -r requirements.txt
```

### 5. Create a Configuration File

Copy the sample environment file and edit it with any text editor:

```bash
cp .env.example .env           # macOS/Linux
copy .env.example .env         # Windows
```

All values are **optional**. Without them the app still works using free public data. To unlock more features:

- **NEWSAPI_KEY** – Create a free account at [newsapi.org](https://newsapi.org) and paste the key
- **Reddit keys** – Visit [reddit.com/prefs/apps](https://www.reddit.com/prefs/apps), create an app and copy the client ID and secret
- **UNSPLASH_ACCESS_KEY** or **PEXELS_API_KEY** – Add one of these to enable photo collection for your topics
- **Email Settings**:
  - **BREVO_API** – Sign up for a free [Brevo/Sendinblue](https://www.brevo.com/) account and copy your API key
  - **BREVO_FROM** – Email address to send from (must be validated in your Brevo account)
  - **BREVO_FROM_NAME** – Display name for the sender
- **AI Models**:
  - **OLLAMA_MODEL** – Install [Ollama](https://ollama.ai) and run `ollama pull qwen:latest`, then set `OLLAMA_MODEL=qwen`
  - **OPENAI_API_KEY** – Or use OpenAI for summary generation
- **Social Media Sources**:
  - **Twitter/X** – Uses snscrape (no authentication needed)
  - **Facebook pages** – No key required. When adding a topic, include public Facebook page URLs in the **Profiles** field
  - **Instagram** – Add Instagram usernames to the Profiles field
  - **YouTube** – Uses public search API (no authentication needed)

### 6. Run the Dashboard

```bash
streamlit run app.py
```

Your browser will open to the dashboard. Use the sidebar to add topics, optional keywords, and click **Collect Now** to fetch data.

## Streamlit Cloud Deployment Guide

### 1. Prepare Your Repository

1. **GitHub Repository**:
   - Push your code to a GitHub repository (can be private).
   - Make sure your repository contains all necessary files including:
     - `app.py` (main application)
     - `app_config.py` (configuration)
     - `.streamlit/` directory with all CSS and config files
     - `requirements.txt`
     - `runtime.txt`

2. **Environment Configuration Files**:
   - Ensure your repository has the following essential files:
     - `runtime.txt` - specifies Python version (e.g., `python-3.10.15`)
     - `requirements.txt` - lists all required packages with versions
     - `.streamlit/config.toml` - Streamlit configuration
     - `.streamlit/style.css`, `custom_css.css`, etc. - styling for consistent appearance

### 2. Set Up Streamlit Cloud Account

1. Sign up at [share.streamlit.io](https://share.streamlit.io/) using your GitHub account.
2. Click "New app" and select your GitHub repository.
3. Select the main branch and specify the path to your main file (`app.py`).

### 3. Configure Secrets

For security, API keys and sensitive information should be configured through Streamlit Cloud's secrets management:

1. In your app's settings page, find the "Secrets" section.
2. Add your environment variables in TOML format:
   ```toml
   NEWSAPI_KEY = "your_newsapi_key"
   REDDIT_CLIENT_ID = "your_reddit_client_id"
   REDDIT_CLIENT_SECRET = "your_reddit_client_secret"
   BREVO_API = "your_brevo_api_key"
   BREVO_FROM = "your_verified_email@example.com"
   BREVO_FROM_NAME = "Your Name"
   # Add other necessary keys
   ```

### 4. Advanced Settings

1. **Resource Limits**:
   - If needed, adjust the app's resource allocation in settings.
   - For resource-intensive features, consider upgrading your Streamlit plan.

2. **Custom Domain**:
   - You can configure a custom subdomain for your app in the settings.

3. **Theme Customization**:
   - The app already includes theme settings in `.streamlit/config.toml`.

### 5. Troubleshooting Cloud Deployment

If you encounter issues with your cloud deployment, check:

1. **CSS and Layout Issues**:
   - The app has cloud-specific CSS fixes in the `.streamlit` directory.
   - CSS files (`style.css`, `cloud_fixes.css`, and `custom_css.css`) contain fixes for common Streamlit Cloud rendering issues.

2. **Python Version Compatibility**:
   - The `runtime.txt` file specifies Python 3.10.15.
   - If deploy fails with "Unknown runtime", try a different 3.10.x version as noted in the file.

3. **Package Issues**:
   - If packages fail to install, check the error logs in Streamlit Cloud.
   - You might need to update specific package versions in `requirements.txt`.

4. **Diagnostics Mode**:
   - The app includes a diagnostics panel that shows environment details.
   - Enable it by checking "Show diagnostics" in the sidebar.
   - Compare local and cloud environments to identify discrepancies.

5. **Fixed Width Layout**:
   - The app uses fixed-width containers to ensure consistent appearance.
   - Main content is limited to 1440px width, with cards at 550px fixed width.
   - This helps prevent layout issues across different screen sizes.

For more details on cloud-specific adjustments, refer to the `CLOUD_DEPLOYMENT.md` file.

## Screenshots

*(Add your own screenshots here)*

## Security

All data and API keys remain local. Never commit `.env` files with secrets.

## License

MIT
